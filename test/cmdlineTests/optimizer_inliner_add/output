
======= optimizer_inliner_add/input.sol:C =======
EVM assembly:
    /* "optimizer_inliner_add/input.sol":165:305  contract C {... */
  mstore(0x40, 0x80)
  callvalue
  dup1
  iszero
  tag_2
  jumpi
  0x00
  dup1
  revert
tag_2:
  pop
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "optimizer_inliner_add/input.sol":165:305  contract C {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_2
      jumpi
      0x00
      dup1
      revert
    tag_2:
      pop
      jumpi(tag_3, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x26121ff0
      eq
      tag_4
      jumpi
    tag_3:
      0x00
      dup1
      revert
        /* "optimizer_inliner_add/input.sol":182:303  function f() public pure {... */
    tag_4:
      tag_5
      tag_6
      jump	// in
    tag_5:
      stop
    tag_6:
        /* "optimizer_inliner_add/input.sol":221:227  uint x */
      0x00
        /* "optimizer_inliner_add/input.sol":217:297  for(uint x = 0; x < 10; x = unsafe_add(x, unsafe_add(x, 1)))... */
    tag_8:
        /* "optimizer_inliner_add/input.sol":237:239  10 */
      0x0a
        /* "optimizer_inliner_add/input.sol":233:234  x */
      dup2
        /* "optimizer_inliner_add/input.sol":233:239  x < 10 */
      lt
        /* "optimizer_inliner_add/input.sol":217:297  for(uint x = 0; x < 10; x = unsafe_add(x, unsafe_add(x, 1)))... */
      iszero
      tag_9
      jumpi
        /* "optimizer_inliner_add/input.sol":149:154  x + y */
      dup1
      add
        /* "optimizer_inliner_add/input.sol":273:274  1 */
      0x01
        /* "optimizer_inliner_add/input.sol":149:154  x + y */
      add
        /* "optimizer_inliner_add/input.sol":217:297  for(uint x = 0; x < 10; x = unsafe_add(x, unsafe_add(x, 1)))... */
      jump(tag_8)
    tag_9:
      pop
        /* "optimizer_inliner_add/input.sol":182:303  function f() public pure {... */
      jump	// out

    auxdata: <AUXDATA REMOVED>
}
